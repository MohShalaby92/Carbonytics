version: '3.8'

services:
  # Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: carbonytics-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - carbonytics-network

  # Frontend Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: carbonytics-frontend
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
      - REACT_APP_APP_NAME=Carbonytics
      - REACT_APP_VERSION=1.0.0
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - carbonytics-network

  # Backend Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: carbonytics-backend
    expose:
      - "5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/carbonytics_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_EXPIRE=7d
      - REFRESH_TOKEN_EXPIRE=30d
      - CLIENT_URL=https://carbonytics.com
      - MAX_FILE_SIZE=10485760
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100
      - CACHE_TTL=3600
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
    env_file:
      - .env.production
    depends_on:
      - mongo
      - redis
    restart: unless-stopped
    networks:
      - carbonytics-network
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs

  # MongoDB Production - FIXED: Removed problematic config file mount
  mongo:
    image: mongo:7.0
    container_name: carbonytics-mongo
    environment:
      - MONGO_INITDB_DATABASE=carbonytics_prod
  #    - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
  #    - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
      - ./backups/mongo:/backup
      # REMOVED: - ./mongo/mongod.conf:/etc/mongod.conf
    # REMOVED: command: ["mongod", "--config", "/etc/mongod.conf"]
    restart: unless-stopped
    networks:
      - carbonytics-network

  # Redis Production
  redis:
    image: redis:7.2-alpine
    container_name: carbonytics-redis
    command: redis-server --appendonly yes # --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env.production
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - carbonytics-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: carbonytics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - carbonytics-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: carbonytics-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - carbonytics-network

volumes:
  mongo_data:
  redis_data:
  uploads:
  logs:
  prometheus_data:
  grafana_data:

networks:
  carbonytics-network:
    driver: bridge